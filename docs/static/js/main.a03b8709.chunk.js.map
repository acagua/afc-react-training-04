{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","i","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,oCACI,0BAAMC,SAXO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAQV,2BACIO,KAAK,OACLC,MAAQT,EACRU,SApBU,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,aCTlBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OAEI,yBAAKC,UAAU,0CACX,yBAAKC,IAAKF,EAAKG,IAAKJ,IACnB,2BAAIA,K,uBCPHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAEJ,uCACD,mCAEA,KACTN,EANc,UAEJ,uCAFI,oBAGL,mCAHK,cAM0BO,UAAUF,GANpC,kBAKL,MALK,SAQDG,MAAMR,GARL,cAQdS,EARc,gBASCA,EAAKC,OATN,uBASbC,EATa,EASbA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHhB,GAAKgB,EAAIhB,GACTC,MAAQe,EAAIf,MACZC,IAAMc,EAAIC,OAAOC,iBAAiBhB,QAftB,kBAsBbY,GAtBa,4CAAH,sDCKRK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAAc,ECHX,SAAEA,GAAe,IAAD,EAEdrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAQ,IAJ4B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA0BxC,OAnBAC,qBAAW,WACNjB,EAASC,GACLiB,MAAM,SAAAR,GAECM,EAAS,CACLT,KAAMG,EACNI,SAAQ,SAIzB,CAACb,IASGc,EDTwBI,CAAclB,GAAjCU,EAduB,EAc5BJ,KAAaO,EAde,EAcfA,QA8BpB,OACI,oCACI,wBAAIjB,UAAU,qCAAqCI,GAClDa,GAAW,uBAAGjB,UAAU,oCAAb,cACZ,yBAAKA,UAAU,aAEPc,EAAOF,KAAK,SAACW,EAAOC,GAAR,OACR,kBAAC,EAAD,eACAC,IAAOF,EAAM1B,IACT0B,UErDfG,EAAe,WAAM,MAGM3C,mBAAS,CAAC,SAHhB,mBAGvB4C,EAHuB,KAGX7C,EAHW,KAU9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAKA,4BAEQ6C,EAAWf,KAAK,SAACR,EAAUoB,GAAX,OACR,kBAAC,EAAD,CACIC,IAAKrB,EACLA,SAAUA,UCtB1CwB,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.a03b8709.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('');\n    \n    const handleInputChange = (e) => {\n        //console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length>1){\n            setCategories( cats => [inputValue, ...cats]); //set maneja un callback con el valor original \n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <input \n                    type=\"text\"\n                    value= {inputValue}\n                    onChange={handleInputChange}\n                />  \n            </form>\n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories : PropTypes.func.isRequired,\n};\n","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n    //console.log({id, title, url})\n    return (\n        // classname porque class es una palabra reservada para js\n        <div className='card animate__animated animate__fadeIn'> \n            <img src={url} alt={title} />\n             <p>{title}</p>\n        </div>\n    )\n}\n","\n export const getGifs = async( category ) => {\n        \n    const baseUrl = \"https://api.giphy.com/v1/gifs/search\";\n    const apiKey = \"YXUWTYnIQkfiMDtJY2a4z8mHqKjvCC4n\"\n    //const query = \"laugh\";\n    const limit  = \"10\";\n    const url = `${baseUrl}?api_key=${apiKey}&q=${encodeURI(category)}&limit=${limit}`;\n    \n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id : img.id,\n            title : img.title,\n            url : img.images.downsized_medium.url\n        }\n\n    } )\n\n    //console.log('data', gifs);\n    //setImages(gifs);\n    return gifs;\n}","//import React, { useState, useEffect } from 'react'; //el useEffect permite ejeecución condicional a diferencia del useState\nimport React from 'react';\n//import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({category}) => {\n    \n\n    //Hook useEffect\n    //const [count, setCount] = useState(0);\n\n    // const [images, setImages] = useState([]);\n\n    // useEffect( () => {\n    //      getGifs( category)\n    //         .then(setImages);\n    // }, [category]); // si el segundo parámetro se envía vacío se ejecuta una única vez (la primera vez que se renderiza el contenido)\n\n    //Custom Hook\n    const {data:images, loading} = useFetchGifs( category );\n    //console.log({data, loading})\n\n    //Esto debería estar en un helper para dejar más especifico lo que hace cada componente\n    // const getGifs = async() => { \n        \n    //     const baseUrl = \"https://api.giphy.com/v1/gifs/search\";\n    //     const apiKey = \"YXUWTYnIQkfiMDtJY2a4z8mHqKjvCC4n\"\n    //     const query = \"laugh\";\n    //     const limit  = \"10\";\n    //     const url = `${baseUrl}?api_key=${apiKey}&q=${encodeURI(category)}&limit=${limit}`;\n        \n    //     const resp = await fetch(url);\n    //     const {data} = await resp.json();\n\n    //     const gifs = data.map( img => {\n    //         return {\n    //             id : img.id,\n    //             title : img.title,\n    //             url : img.images.downsized_medium.url\n    //         }\n\n    //     } )\n\n    //     console.log('data', gifs);\n    //     setImages(gifs);\n    // }\n    \n\n\n    return (\n        <>\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>   \n            {loading && <p className='animate__animated animate__flash'>Loading...</p>}\n            <div className='card-grid'>\n                { \n                    images.map( (image, i)  => (\n                        <GifGridItem \n                        key = {image.id}\n                        {...image} //para enviar propiedades de la imagen de manera independiente \n                        />\n                    ))\n                }\n            </div>\n        </>\n    )  \n}\n","import {useEffect, useState} from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading:true\n    });\n\n    useEffect( () => {\n         getGifs( category)\n            .then( img => {\n                // setTimeout ( () => {\n                    setState({\n                        data: img,\n                        loading:false\n                    });\n                // }, 3000);\n            });\n    }, [category]);\n\n    \n    // setTimeout( ()=>{\n    //     setState({\n    //         data: [1,2,3,4],\n    //         loading:false\n    //     })\n    // }, 3000)\n    return state;\n}","\nimport React, {useState} from 'react'; // rafc -> TAB\n//import PropTypes from 'prop-types';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    // const categories = ['alimentos', 'ropa', 'tecnología'];\n    const [categories, setCategories] = useState(['poop']);\n\n    /*const handleAdd = () => {\n        setCategories([...categories,'tecnología']); //si queremos agregarla al principio podemos poner tecnoliga antes de ...categories\n        //setCategories( cats => [...cats,'Tecnología']); //set maneja un callback con el valor original \n\n    };*/\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>  \n            <hr/>\n            {/* <button onClick = { handleAdd }>\n                Agregar\n            </button> */}\n\n            <ol>\n                { \n                    categories.map( (category, i)  => (//i = index en el array, //map transforma cada elemento del arreglo\n                            <GifGrid \n                                key={category}\n                                category={category}\n                            />\n                    ))\n                }\n            </ol>\n        </>    \n    )\n}\n\n//export default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\n//import App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode> // mas estricto\n    <GifExpertApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);  \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}